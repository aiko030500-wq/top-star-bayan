import streamlit as st
import json
import openai

# ===============================
# APP CONFIGURATION
# ===============================
APP_NAME = "AI Bayan for TS ‚Äî Smart English Trainer"
st.set_page_config(page_title=APP_NAME, page_icon="ü§ñ", layout="wide")

# ===============================
# LOGO AND HEADER
# ===============================
LOGO_URL = "https://raw.githubusercontent.com/aiko030500-wq/top-star-bayan/main/assets/ai_bayan_logo.png"

try:
    st.sidebar.image(LOGO_URL, use_container_width=True)
except Exception as e:
    st.sidebar.warning("‚ö†Ô∏è Couldn't load logo from GitHub URL.")
st.sidebar.title("üëß AI Bayan for TS")
st.sidebar.markdown("Smart English Trainer for students in Kazakhstan üá∞üáø")

# ===============================
# LOAD CURRICULUM
# ===============================
try:
    with open("data/curriculum.json", "r", encoding="utf-8") as f:
        curriculum = json.load(f)
except Exception:
    curriculum = {"units": []}
    st.warning("‚ö†Ô∏è Curriculum file not found or invalid. Please check data/curriculum.json")

# ===============================
# APP MENU
# ===============================
sections = [
    "Vocabulary",
    "Grammar",
    "Reading",
    "Listening",
    "Speaking",
    "Writing",
    "Games",
    "Progress",
    "AI-Chat Bayan"
]

section = st.sidebar.radio("üìö Choose a section:", sections)

# ===============================
# PAGE TITLE
# ===============================
st.title("üëß AI Bayan for TS ‚Äî Smart English Trainer")
st.write("Learn English with **AI Bayan** ‚Äî your interactive AI assistant for TS students üá∞üáø")

# ===============================
# SECTION LOGIC
# ===============================

if section == "Vocabulary":
    st.header("üìñ Vocabulary Practice")
    if curriculum["units"]:
        for word in curriculum["units"][0]["vocabulary"]:
            st.markdown(f"**{word['word']}** ‚Äî {word['translation']}")
            st.caption(f"Example: {word['example']}")
    else:
        st.info("No vocabulary data found yet.")

elif section == "Grammar":
    st.header("‚úèÔ∏è Grammar Exercises")
    if curriculum["units"]:
        grammar = curriculum["units"][0]["grammar"]
        st.subheader(grammar["topic"])
        for ex in grammar["exercises"]:
            st.text_input(ex["question"], key=ex["question"])
    else:
        st.info("No grammar data found yet.")

elif section == "Reading":
    st.header("üìö Reading Practice")
    if curriculum["units"]:
        text = curriculum["units"][0]["reading"]
        st.write(text["text_en"])
        st.caption(text["text_ru"])
    else:
        st.info("No reading data found yet.")

elif section == "Listening":
    st.header("üéß Listening Practice")
    if curriculum["units"]:
        listen = curriculum["units"][0]["listening"]
        st.write(listen["script_en"])
        st.caption(listen["script_ru"])
    else:
        st.info("No listening data found yet.")

elif section == "Speaking":
    st.header("üó£Ô∏è Speaking Practice")
    if curriculum["units"]:
        for task in curriculum["units"][0]["speaking_prompts"]:
            st.markdown(f"- {task}")
    else:
        st.info("No speaking prompts found yet.")

elif section == "Writing":
    st.header("‚úçÔ∏è Writing Practice")
    if curriculum["units"]:
        for task in curriculum["units"][0]["writing_tasks"]:
            st.markdown(f"- {task}")
    else:
        st.info("No writing tasks found yet.")

elif section == "Games":
    st.header("üéÆ English Games")
    st.info("Fun interactive games will be added soon! üí´")

elif section == "Progress":
    st.header("üåü Progress Tracker")
    st.info("Track your achievements and stars ‚≠ê")

# ===============================
# AI-CHAT BAYAN SECTION
# ===============================
elif section == "AI-Chat Bayan":
    from openai import OpenAI

    st.header("ü§ñ AI Bayan ‚Äî —Ç–≤–æ–π —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É!")

    # 1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
    try:
        client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
    except Exception as e:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI. –ü—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Streamlit.")
        st.stop()

    # 2Ô∏è‚É£ –ü–æ–ª–µ –≤–≤–æ–¥–∞
    user_input = st.chat_input("üí¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É...")

    # 3Ô∏è‚É£ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    for msg in st.session_state.chat_history:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # 4Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if user_input:
        st.session_state.chat_history.append({"role": "user", "content": user_input})
        with st.chat_message("user"):
            st.markdown(user_input)

        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî AI Bayan, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —É—á–∏—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ 4 –∫–ª–∞—Å—Å–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."},
                    *st.session_state.chat_history
                ],
            )
            reply = response.choices[0].message.content
        except Exception as e:
            reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}"

        # 5Ô∏è‚É£ –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
        with st.chat_message("assistant"):
            st.markdown(reply)
        st.session_state.chat_history.append({"role": "assistant", "content": reply})

            st.warning("Please enter your message first.")
